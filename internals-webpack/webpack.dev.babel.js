const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const ProgressBarPlugin = require('progress-bar-webpack-plugin');
const base = require('./webpack.base.babel');

const plugins = [
    new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
    new webpack.NoEmitOnErrorsPlugin(),
    new HtmlWebpackPlugin({
        inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
        templateContent: templateContent()
    }),
    new CircularDependencyPlugin({
        exclude: /a\.js|node_modules/, // exclude node_modules
        failOnError: false // show a warning when there is a circular dependency
    }),
    new ProgressBarPlugin({
        format: `build [:bar] ${chalk.green.bold(':percent')}`
    }),

    new webpack.ContextReplacementPlugin(/\.\/locale$/, (context) => {
        if (!/\\moment\\/.test(context.context)) return;

        // context needs to be modified in place
        Object.assign(context, {
            regExp: /^\.\/(en|nl)/,
            // point to the locale data folder relative to moment's src/lib/locale
            request: '../../locale'
        });
    })

];

module.exports = base({
    // Add hot reloading in development
    entry: [
        'react-hot-loader/patch',
        'webpack-hot-middleware/client?reload=true',
        path.join(process.cwd(), 'app/app.js') // Start with js/app.js
    ],

    // Don't use hashes in dev mode for better performance
    output: {
        filename: '[name].js'
    },

    // Add development plugins
    plugins,

    // Emit a source map for easier debugging
    devtool: 'eval-source-map',

    performance: {
        hints: false
    },

    devServer: {
        hot: true
    }
});

function templateContent() {
    return fs
        .readFileSync(path.resolve(process.cwd(), 'app/index.html'))
        .toString();
}